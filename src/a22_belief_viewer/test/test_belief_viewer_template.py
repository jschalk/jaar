from src.a03_group_logic.test._util.a03_str import (
    _credor_pool_str,
    _debtor_pool_str,
    _fund_agenda_give_str,
    _fund_agenda_ratio_give_str,
    _fund_agenda_ratio_take_str,
    _fund_agenda_take_str,
    _fund_give_str,
    _fund_take_str,
    _inallocable_partner_debt_points_str,
    _irrational_partner_debt_points_str,
    _memberships_str,
    partner_cred_points_str,
    partner_debt_points_str,
)
from src.a05_plan_logic.test._util.a05_str import (
    _active_hx_str,
    _active_str,
    _all_partner_cred_str,
    _all_partner_debt_str,
    _awardheirs_str,
    _awardlines_str,
    _chore_str,
    _descendant_task_count_str,
    _factheirs_str,
    _fund_cease_str,
    _fund_onset_str,
    _fund_ratio_str,
    _gogo_calc_str,
    _healerunit_ratio_str,
    _is_expanded_str,
    _kids_str,
    _laborheir_str,
    _level_str,
    _range_evaluated_str,
    _reasonheirs_str,
    _stop_calc_str,
    _uid_str,
    addin_str,
    awardunits_str,
    begin_str,
    close_str,
    denom_str,
    fund_iota_str,
    fund_share_str,
    gogo_want_str,
    healerunit_str,
    knot_str,
    laborunit_str,
    moment_label_str,
    morph_str,
    numor_str,
    plan_label_str,
    problem_bool_str,
    reasonunits_str,
    star_str,
    stop_want_str,
    task_str,
)
from src.a06_belief_logic.test._util.a06_str import (
    factunits_str,
    parent_rope_str,
    partners_str,
    planroot_str,
)
from src.a22_belief_viewer.belief_viewer_app import get_belief_viewer_template


def test_get_belief_viewer_template_ReturnsObj():
    # ESTABLISH / WHEN
    template_str = get_belief_viewer_template()

    # THEN
    assert template_str
    expected_strs_in_template = {
        _active_hx_str(),
        _active_str(),
        _all_partner_cred_str(),
        _all_partner_debt_str(),
        _awardheirs_str(),
        _awardlines_str(),
        _chore_str(),
        _descendant_task_count_str(),
        _factheirs_str(),
        _fund_cease_str(),
        _fund_onset_str(),
        _fund_ratio_str(),
        _gogo_calc_str(),
        # _healerunit_ratio_str(),
        # _is_expanded_str(),
        _laborheir_str(),
        _level_str(),
        # _range_evaluated_str(),
        _reasonheirs_str(),
        _stop_calc_str(),
        _uid_str(),
        addin_str(),
        awardunits_str(),
        begin_str(),
        moment_label_str(),
        close_str(),
        denom_str(),
        factunits_str(),
        fund_iota_str(),
        fund_share_str(),
        gogo_want_str(),
        # healerunit_str(),
        # knot_str(),
        laborunit_str(),
        morph_str(),
        numor_str(),
        parent_rope_str(),
        partners_str(),
        plan_label_str(),
        planroot_str(),
        # problem_bool_str(),
        reasonunits_str(),
        "root",
        star_str(),
        stop_want_str(),
        task_str(),
        partner_cred_points_str(),
        partner_debt_points_str(),
        f"partner{_memberships_str()}",
        f"partner{_credor_pool_str()}",
        f"partner{_debtor_pool_str()}",
        f"partner{_irrational_partner_debt_points_str()}",
        f"partner{_inallocable_partner_debt_points_str()}",
        f"partner{_fund_give_str()}",
        f"partner{_fund_take_str()}",
        f"partner{_fund_agenda_give_str()}",
        f"partner{_fund_agenda_take_str()}",
        f"partner{_fund_agenda_ratio_give_str()}",
        f"partner{_fund_agenda_ratio_take_str()}",
    }

    for expected_str in sorted(list(expected_strs_in_template)):
        print(f"{expected_str=}")
        assert template_str.find(expected_str) > 0
